function updateUserStatus(e){try{if(!e||!e.phone)return;const o=document.querySelector(`.user-card[data-phone="${e.phone}"]`);if(!o)return;const t=o.querySelector(".user-status");t&&(t.classList.remove("online","offline"),t.classList.add(e.connected?"online":"offline"))}catch(e){}}function addUser(){try{const e=document.getElementById("newUserPhone");if(!e)return;let o=e.value.trim();if(!o)return void showNotification("Errore","Inserisci un numero di telefono valido","danger");if(o=o.replace(/^\+/,"").replace(/\s/g,""),!/^\d+$/.test(o))return void showNotification("Errore","Il numero di telefono deve contenere solo cifre","danger");showSpinner("Aggiunta utente","Connessione a Telegram in corso..."),fetch("/api/users",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({phone:o})}).then((e=>e.json())).then((e=>{hideSpinner(),e.success?(showNotification("Successo","Utente aggiunto con successo","success"),window.location.reload()):"code_sent"===e.status?showVerificationCodeDialog(e.phone,e.phone_code_hash):"password_required"===e.status?show2FAPasswordDialog(e.phone):"flood_wait"===e.status?showFloodWaitModal(e.phone,e.message,e.wait_seconds):showNotification("Errore",e.message||"Errore durante l'aggiunta dell'utente","danger")})).catch((e=>{hideSpinner(),showNotification("Errore","Si è verificato un errore durante la connessione al server","danger")}))}catch(e){hideSpinner(),showNotification("Errore","Si è verificato un errore durante l'aggiunta dell'utente","danger")}}function showFloodWaitModal(e,o,t){try{const e=new Date(Date.now()+1e3*t).toLocaleString();let n="floodWaitModal",i=document.getElementById(n);if(i){const t=i.querySelector("#floodWaitMessage"),n=i.querySelector("#floodWaitRetryTime");t&&(t.textContent=o),n&&(n.textContent=e)}else i=document.createElement("div"),i.id=n,i.className="modal fade",i.setAttribute("tabindex","-1"),i.setAttribute("aria-labelledby","floodWaitModalLabel"),i.setAttribute("aria-hidden","true"),i.innerHTML=`\n                <div class="modal-dialog">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h5 class="modal-title" id="floodWaitModalLabel">Limite di tempo Telegram</h5>\n                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                        </div>\n                        <div class="modal-body">\n                            <div class="alert alert-warning">\n                                <i class="bi bi-exclamation-triangle"></i> <strong>Attesa richiesta</strong>\n                            </div>\n                            <p id="floodWaitMessage">${o}</p>\n                            <p>Potrai richiedere un nuovo codice a partire da:<br>\n                            <strong id="floodWaitRetryTime">${e}</strong></p>\n                            <p class="mt-3">Questo è un limite imposto da Telegram per prevenire abusi del sistema di autenticazione.</p>\n                            <hr>\n                            <p>Se hai già un account autenticato in precedenza, puoi provare ad usare quello invece di crearne uno nuovo.</p>\n                        </div>\n                        <div class="modal-footer">\n                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Chiudi</button>\n                        </div>\n                    </div>\n                </div>\n            `,document.body.appendChild(i);try{new bootstrap.Modal(i).show()}catch(e){i.classList.add("show"),i.style.display="block",document.body.classList.add("modal-open");if(!document.querySelector(".modal-backdrop")){const e=document.createElement("div");e.className="modal-backdrop fade show",document.body.appendChild(e)}}}catch(e){showNotification("Errore",o||"È necessario attendere prima di richiedere un nuovo codice di verifica","warning")}}function removeUser(e){try{if(!e)return;showSpinner("Rimozione utente","Rimozione dell'utente in corso..."),fetch("/api/users",{method:"DELETE",headers:{"Content-Type":"application/json"},body:JSON.stringify({phone:e})}).then((e=>e.json())).then((o=>{if(hideSpinner(),o.success){showNotification("Successo","Utente rimosso con successo","success");const o=document.querySelector(`.user-card[data-phone="${e}"]`);if(o){const e=o.closest(".col-md-4");e&&e.remove()}const t=document.getElementById("usersContainer");t&&!t.querySelector(".user-card")&&(t.innerHTML='<div class="alert alert-info">Nessun utente registrato</div>')}else showNotification("Errore",o.message||"Errore durante la rimozione dell'utente","danger")})).catch((e=>{hideSpinner(),showNotification("Errore","Si è verificato un errore durante la connessione al server","danger")}))}catch(e){hideSpinner(),showNotification("Errore","Si è verificato un errore durante la rimozione dell'utente","danger")}}function showVerificationCodeDialog(e,o){try{let t=document.getElementById("verificationCodeModal");if(t){const n=t.querySelector("#verificationPhone");n&&(n.value=e);const i=t.querySelector("#phoneCodeHash");i&&o&&(i.value=o)}else{t=document.createElement("div"),t.id="verificationCodeModal",t.className="modal fade",t.setAttribute("tabindex","-1"),t.setAttribute("aria-labelledby","verificationCodeModalLabel"),t.setAttribute("aria-hidden","true"),t.innerHTML=`\n                <div class="modal-dialog">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h5 class="modal-title" id="verificationCodeModalLabel">Verifica Telegram</h5>\n                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                        </div>\n                        <div class="modal-body">\n                            <p>Telegram ha inviato un codice di verifica al tuo numero ${e}.</p>\n                            <p>Inserisci il codice ricevuto:</p>\n                            <input type="text" class="form-control" id="verificationCode" placeholder="Codice" maxlength="5">\n                            <input type="hidden" id="verificationPhone" value="${e}">\n                            <input type="hidden" id="phoneCodeHash" value="${o||""}">\n                        </div>\n                        <div class="modal-footer">\n                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>\n                            <button type="button" class="btn btn-primary" id="submitVerificationCode">Verifica</button>\n                        </div>\n                    </div>\n                </div>\n            `,document.body.appendChild(t);const n=document.getElementById("submitVerificationCode");n&&n.addEventListener("click",(function(){const e=document.getElementById("verificationCode").value.trim(),o=document.getElementById("verificationPhone").value;e?submitVerificationCode(o,e):showNotification("Errore","Inserisci il codice di verifica","danger")}))}try{new bootstrap.Modal(t).show()}catch(e){t.classList.add("show"),t.style.display="block",document.body.classList.add("modal-open");if(!document.querySelector(".modal-backdrop")){const e=document.createElement("div");e.className="modal-backdrop fade show",document.body.appendChild(e)}}}catch(e){showNotification("Errore","Si è verificato un errore durante la visualizzazione del dialog di verifica","danger")}}function show2FAPasswordDialog(e){try{let o=document.getElementById("twoFAPasswordModal");if(o){const t=o.querySelector("#twoFAPhone");t&&(t.value=e)}else{o=document.createElement("div"),o.id="twoFAPasswordModal",o.className="modal fade",o.setAttribute("tabindex","-1"),o.setAttribute("aria-labelledby","twoFAPasswordModalLabel"),o.setAttribute("aria-hidden","true"),o.innerHTML=`\n                <div class="modal-dialog">\n                    <div class="modal-content">\n                        <div class="modal-header">\n                            <h5 class="modal-title" id="twoFAPasswordModalLabel">Autenticazione a due fattori</h5>\n                            <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>\n                        </div>\n                        <div class="modal-body">\n                            <p>Il tuo account Telegram richiede l'autenticazione a due fattori.</p>\n                            <p>Inserisci la password 2FA:</p>\n                            <input type="password" class="form-control" id="twoFAPassword" placeholder="Password">\n                            <input type="hidden" id="twoFAPhone" value="${e}">\n                        </div>\n                        <div class="modal-footer">\n                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Annulla</button>\n                            <button type="button" class="btn btn-primary" id="submitTwoFAPassword">Verifica</button>\n                        </div>\n                    </div>\n                </div>\n            `,document.body.appendChild(o);const t=document.getElementById("submitTwoFAPassword");t&&t.addEventListener("click",(function(){const e=document.getElementById("twoFAPassword").value.trim(),o=document.getElementById("twoFAPhone").value;e?submitTwoFAPassword(o,e):showNotification("Errore","Inserisci la password 2FA","danger")}))}try{new bootstrap.Modal(o).show()}catch(e){o.classList.add("show"),o.style.display="block",document.body.classList.add("modal-open");if(!document.querySelector(".modal-backdrop")){const e=document.createElement("div");e.className="modal-backdrop fade show",document.body.appendChild(e)}}}catch(e){showNotification("Errore","Si è verificato un errore durante la visualizzazione del dialog 2FA","danger")}}function submitVerificationCode(e,o){try{let t="";const n=document.getElementById("phoneCodeHash");if(n&&(t=n.value),!t){const e=document.getElementById("verificationCodeModal");e&&e.dataset.phoneCodeHash&&(t=e.dataset.phoneCodeHash)}showSpinner("Verifica codice","Verifica del codice in corso..."),fetch("/api/users/verify",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({phone:e,code:o,phone_code_hash:t})}).then((e=>e.json())).then((o=>{hideSpinner(),o.success?(showNotification("Successo","Utente verificato con successo","success"),window.location.reload()):"password_required"===o.status?show2FAPasswordDialog(e):showNotification("Errore",o.message||"Errore durante la verifica del codice","danger")})).catch((e=>{hideSpinner(),showNotification("Errore","Si è verificato un errore durante la connessione al server","danger")}))}catch(e){hideSpinner(),showNotification("Errore","Si è verificato un errore durante l'invio del codice di verifica","danger")}}function submitTwoFAPassword(e,o){try{const t=document.getElementById("twoFAPasswordModal");if(t)try{const e=bootstrap.Modal.getInstance(t);if(e)e.hide();else{t.classList.remove("show"),t.style.display="none",document.body.classList.remove("modal-open");const e=document.querySelector(".modal-backdrop");e&&e.remove()}}catch(e){}showSpinner("Verifica password","Verifica della password in corso..."),fetch("/api/users/verify",{method:"POST",headers:{"Content-Type":"application/json"},body:JSON.stringify({phone:e,password:o})}).then((e=>e.json())).then((e=>{hideSpinner(),e.success?(showNotification("Successo","Utente verificato con successo","success"),window.location.reload()):showNotification("Errore",e.message||"Errore durante la verifica della password","danger")})).catch((e=>{hideSpinner(),showNotification("Errore","Si è verificato un errore durante la connessione al server","danger")}))}catch(e){hideSpinner(),showNotification("Errore","Si è verificato un errore durante l'invio della password 2FA","danger")}}function loadActiveUsers(){fetch("/api/users").then((e=>e.json())).then((e=>{updateActiveUsersList(e)})).catch((e=>{}))}function updateActiveUsersList(e){const o=document.getElementById("activeUsersContainer");if(!o)return;if(o.innerHTML="",0===e.length)return void(o.innerHTML='<div class="alert alert-info">Nessun utente attivo</div>');const t=document.createElement("div");t.className="row",e.forEach((e=>{const o=document.createElement("div");o.className="col-md-4 mb-3",o.innerHTML=`\n            <div class="card user-card">\n                <div class="card-header d-flex align-items-center">\n                    <div class="user-avatar">\n                        <i class="bi bi-person"></i>\n                    </div>\n                    <h5 class="card-title mb-0">${e.first_name} ${e.last_name||""}</h5>\n                    <div class="user-status ${e.connected?"online":"offline"}"></div>\n                </div>\n                <div class="card-body">\n                    <p class="card-text">\n                        <i class="bi bi-phone"></i> ${e.phone}<br>\n                        <i class="bi bi-person-badge"></i> ${e.username||"N/D"}\n                    </p>\n                </div>\n            </div>\n        `,t.appendChild(o)})),o.appendChild(t)}function showSpinner(e,o){const t="spinnerModal";let n=document.getElementById(t);if(n){const n=document.getElementById(`${t}Title`),i=document.getElementById(`${t}Message`);n&&(n.textContent=e||"Caricamento"),i&&(i.textContent=o||"Operazione in corso...")}else n=document.createElement("div"),n.id=t,n.className="modal fade",n.setAttribute("tabindex","-1"),n.setAttribute("data-bs-backdrop","static"),n.setAttribute("data-bs-keyboard","false"),n.innerHTML=`\n            <div class="modal-dialog modal-dialog-centered">\n                <div class="modal-content">\n                    <div class="modal-header">\n                        <h5 class="modal-title" id="${t}Title">${e||"Caricamento"}</h5>\n                    </div>\n                    <div class="modal-body text-center">\n                        <div class="d-flex justify-content-center mb-3">\n                            <div class="spinner-border text-primary" role="status">\n                                <span class="visually-hidden">Caricamento...</span>\n                            </div>\n                        </div>\n                        <p id="${t}Message">${o||"Operazione in corso..."}</p>\n                    </div>\n                </div>\n            </div>\n        `,document.body.appendChild(n);try{const e=new bootstrap.Modal(n);e.show(),window.currentSpinnerModal=e}catch(e){n.classList.add("show"),n.style.display="block",document.body.classList.add("modal-open");if(!document.querySelector(".modal-backdrop")){const e=document.createElement("div");e.className="modal-backdrop fade show",document.body.appendChild(e)}window.currentSpinnerModalElement=n}}function hideSpinner(){try{if(window.currentSpinnerModal)window.currentSpinnerModal.hide(),window.currentSpinnerModal=null;else if(window.currentSpinnerModalElement){const e=window.currentSpinnerModalElement;e.classList.remove("show"),e.style.display="none",document.body.classList.remove("modal-open");const o=document.querySelector(".modal-backdrop");o&&o.remove(),window.currentSpinnerModalElement=null}}catch(e){document.body.classList.remove("modal-open");document.querySelectorAll(".modal-backdrop").forEach((e=>e.remove()))}}window.addUser=addUser,window.removeUser=removeUser,window.loadActiveUsers=loadActiveUsers,window.updateUserStatus=updateUserStatus,window.showVerificationCodeDialog=showVerificationCodeDialog,window.show2FAPasswordDialog=show2FAPasswordDialog,window.submitVerificationCode=submitVerificationCode,window.submitTwoFAPassword=submitTwoFAPassword,window.showSpinner=showSpinner,window.hideSpinner=hideSpinner,window.showFloodWaitModal=showFloodWaitModal;